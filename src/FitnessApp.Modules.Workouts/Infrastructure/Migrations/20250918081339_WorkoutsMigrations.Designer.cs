// <auto-generated />
using System;
using FitnessApp.Modules.Workouts.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitnessApp.Modules.Workouts.Infrastructure.Migrations
{
    [DbContext(typeof(WorkoutsDbContext))]
    [Migration("20250918081339_WorkoutsMigrations")]
    partial class WorkoutsMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("workouts")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitnessApp.Modules.Workouts.Domain.Entities.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedByCoachId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_duration_minutes");

                    b.Property<Guid?>("ImageContentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_workouts_created_at");

                    b.HasIndex("CreatedByCoachId")
                        .HasDatabaseName("ix_workouts_created_by_coach");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("ix_workouts_created_by_user");

                    b.HasIndex("Difficulty")
                        .HasDatabaseName("ix_workouts_difficulty");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_workouts_is_active");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_workouts_name");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_workouts_type");

                    b.ToTable("workouts", "workouts");
                });

            modelBuilder.Entity("FitnessApp.Modules.Workouts.Domain.Entities.WorkoutExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Distance")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("distance_meters");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("Reps")
                        .HasColumnType("integer");

                    b.Property<int?>("RestSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("rest_seconds");

                    b.Property<int?>("Sets")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("weight_kg");

                    b.Property<Guid>("WorkoutPhaseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId")
                        .HasDatabaseName("ix_workout_exercises_exercise_id");

                    b.HasIndex("Order")
                        .HasDatabaseName("ix_workout_exercises_order");

                    b.HasIndex("WorkoutPhaseId")
                        .HasDatabaseName("ix_workout_exercises_phase_id");

                    b.HasIndex("WorkoutPhaseId", "ExerciseId")
                        .IsUnique()
                        .HasDatabaseName("ix_workout_exercises_phase_exercise");

                    b.HasIndex("WorkoutPhaseId", "Order")
                        .IsUnique()
                        .HasDatabaseName("ix_workout_exercises_phase_order");

                    b.ToTable("workout_exercises", "workouts");
                });

            modelBuilder.Entity("FitnessApp.Modules.Workouts.Domain.Entities.WorkoutPhase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EstimatedDurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_duration_minutes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Order")
                        .HasDatabaseName("ix_workout_phases_order");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_workout_phases_type");

                    b.HasIndex("WorkoutId")
                        .HasDatabaseName("ix_workout_phases_workout_id");

                    b.HasIndex("WorkoutId", "Order")
                        .IsUnique()
                        .HasDatabaseName("ix_workout_phases_workout_order");

                    b.ToTable("workout_phases", "workouts");
                });

            modelBuilder.Entity("FitnessApp.Modules.Workouts.Domain.Entities.WorkoutExercise", b =>
                {
                    b.HasOne("FitnessApp.Modules.Workouts.Domain.Entities.WorkoutPhase", "WorkoutPhase")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutPhase");
                });

            modelBuilder.Entity("FitnessApp.Modules.Workouts.Domain.Entities.WorkoutPhase", b =>
                {
                    b.HasOne("FitnessApp.Modules.Workouts.Domain.Entities.Workout", "Workout")
                        .WithMany("Phases")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("FitnessApp.Modules.Workouts.Domain.Entities.Workout", b =>
                {
                    b.Navigation("Phases");
                });

            modelBuilder.Entity("FitnessApp.Modules.Workouts.Domain.Entities.WorkoutPhase", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
