// <auto-generated />
using System;
using FitnessApp.Modules.Users.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitnessApp.Modules.Users.Infrastructure.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20250924070743_UpdatePreferencesTrackingFixed")]
    partial class UpdatePreferencesTrackingFixed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("users")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitnessApp.Modules.Users.Domain.Entities.Preference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Category", "Key")
                        .IsUnique();

                    b.ToTable("Preferences", "users");
                });

            modelBuilder.Entity("FitnessApp.Modules.Users.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FitnessLevel")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryFitnessGoal")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedAt");

                    b.ToTable("UserProfiles", "users");
                });

            modelBuilder.Entity("FitnessApp.Modules.Users.Domain.Entities.Preference", b =>
                {
                    b.HasOne("FitnessApp.Modules.Users.Domain.Entities.UserProfile", null)
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessApp.Modules.Users.Domain.Entities.UserProfile", b =>
                {
                    b.OwnsOne("FitnessApp.Modules.Users.Domain.Entities.Subscription", "Subscription", b1 =>
                        {
                            b1.Property<Guid>("UserProfileUserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("SubscriptionEndDate");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Level")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("SubscriptionLevel");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("SubscriptionStartDate");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.HasKey("UserProfileUserId");

                            b1.ToTable("UserProfiles", "users");

                            b1.WithOwner("UserProfile")
                                .HasForeignKey("UserProfileUserId");

                            b1.Navigation("UserProfile");
                        });

                    b.OwnsOne("FitnessApp.Modules.Users.Domain.ValueObjects.DateOfBirth", "DateOfBirth", b1 =>
                        {
                            b1.Property<Guid>("UserProfileUserId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DateOfBirth");

                            b1.HasKey("UserProfileUserId");

                            b1.ToTable("UserProfiles", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileUserId");
                        });

                    b.OwnsOne("FitnessApp.Modules.Users.Domain.ValueObjects.FullName", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserProfileUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserProfileUserId");

                            b1.ToTable("UserProfiles", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileUserId");
                        });

                    b.OwnsOne("FitnessApp.Modules.Users.Domain.ValueObjects.PhysicalMeasurements", "PhysicalMeasurements", b1 =>
                        {
                            b1.Property<Guid>("UserProfileUserId")
                                .HasColumnType("uuid");

                            b1.Property<decimal?>("BMI")
                                .HasPrecision(4, 2)
                                .HasColumnType("numeric(4,2)")
                                .HasColumnName("BMI");

                            b1.Property<decimal?>("HeightCm")
                                .HasPrecision(5, 2)
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("HeightCm");

                            b1.Property<decimal?>("WeightKg")
                                .HasPrecision(5, 2)
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("WeightKg");

                            b1.HasKey("UserProfileUserId");

                            b1.ToTable("UserProfiles", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileUserId");
                        });

                    b.Navigation("DateOfBirth");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PhysicalMeasurements")
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FitnessApp.Modules.Users.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("Preferences");
                });
#pragma warning restore 612, 618
        }
    }
}
